package Stepik;
/*
Вывод на консоль

Для вывода информации на консоль используются методы print() и println() объекта System.out. При этом метод print() оставляет курсор на той же строке, а метод println() после вывода переводит курсор на новую строку.

Аргумент этих методов должен быть строкой. Эта строка может формироваться как результат конкатенации (соединения) строк, строки и числа, строки и значения переменной. При этом перед выполнением конкатенации  число преобразуется в строку, и затем просто объединяются две строки.

System.out.println("i="+12); //выводит i=12
Однако если операция ‘+’ применяется к двум числам, то сначала выполняется сложение этих чисел, результат которого уже затем преобразуется в строку.

System.out.println(3+4);//выводит 7
Примеры вывода на консоль:

System.out.print("Привет");
System.out.println(", мир!"); //вывод Привет, мир!
System.out.println("Мама"+" мыла "+"раму");//вывод: Мама мыла раму
int i=7;
int j=5;
System.out.println("i="+i); //вывод i=7
System.out.println("i+j="+i+j); //вывод i+j=75
System.out.println("i+j="+(i+j)); //вывод i+j=12
System.out.println(i+j); //вывод 12
Обратите внимание на результат выполнения оператора System.out.println("i+j="+i+j);

Здесь в первой операции ‘+’ участвуют строка и число, поэтому Java интерпретирует ее как операцию конкатенации строк, перед выполнением которой  число 7 преобразуется в строку "7". В итоге получим строку "i+j=7". К этой  строке далее аналогично присоединяется строка "5".

В Java также имеется метод printf()  (при вводе кода можно использовать шаблон souf). Он позволяет форматировать вывод с помощью управляющей строки, которая содержит плейсхолдеры %d, %f и т.д. (аналогично функции printf() языка C):

System.out.printf("i=%d j=%d\n",i,j);
Спецификаторы форматирования, которые можно использовать в методе printf(), показаны в таблице:

Спецификатор формата
Выполняемое форматирование
%s
Строковое представление аргумента
%b
Логическое (булево) значение аргумента
%c
Символьное представление аргумента
%d
Десятичное целое значение аргумента
%o
Восьмеричное целое значение аргумента
%x
Шестнадцатеричное целое значение аргумента
%f
Десятичное вещественное значение с плавающей точкой
%e
Экспоненциальное представление вещественного аргумента
%g
Выбирает более короткое представление из двух: %е или %f
%a
Шестнадцатеричное значение с плавающей точкой
%t
Время и дата
%n
Вставка символа новой строки
%h
Хэш-код аргумента
%%
Вставка знака %
Между знаком % и спецификатором форматирования можно указать  минимальный размер поля
(по умолчанию пробелы дополняются слева), а также знак '-' для выравнивания числа в
поле по левому краю (т.е. пробелы дополняются справа):

System.out.printf("i=%-5d k=%5d\n",i,k);//i выравнивается влево в 5 позициях, k - вправо
Если необходимо, чтобы при выводе число дополнялось слева незначащими нулями, то перед размером поля указывается 0:

int rub=3,kop=0;
System.out.printf("%02d руб. %02d коп.",rub,kop);//выводится: 03 руб. 00 коп.
Для вещественного числа можно после размера поля поставить точку и указать количество
 выводимых знаков после десятичной запятой:

double x=3.123456;
System.out.printf("x=%8.2f\n",x);//число выводится в 8 позициях
//и округляется до 2 знаков после запятой
Ввод с консоли

Ввод строки или числа из консоли проще всего выполнить с помощью объекта класса Scanner.

Этот класс необходимо импортировать из библиотеки java.util (которая по умолчанию не подключается).
 Для этого в начало файла добавляется оператор

import java.util.Scanner;
Перед использованием объект класса Scanner должен быть создан. Это выполняется в строке кода:

Scanner scan=new Scanner(System.in);
Здесь scan - это имя объекта класса Scanner (можно выбрать любое свое имя).
В конструктор объекта класса Scanner передается объект System.in, связанный со
стандартным потоком от клавиатуры.  Создание объектов классов подробно обсуждается в курсе по ООП.

В классе Scanner есть множество методов для ввода данных и одновременного
преобразования их к нужному типу. Так, метод next() считывает строку до пробела.
Следовательно, имя, состоящее из нескольких слов, им ввести нельзя. А вот метод nextLine()
читает всю строку (до нажатия Enter).

Метод nextInt() считывает из входного потока строку до пробела и преобразует
в целое типа int (аналогично метод nextDouble() считывает и преобразует в число типа double, и т.д.)

Все эти методы вызываются от имени объекта scan, который был создан раньше.

После любого считывания текущий указатель потока останавливается перед следующем элементом.
Поэтому дальнейшее обращение к объекту Scanner считывает этот следующий элемент из потока ввода.

import java.util.Scanner;

public class Example9 {
    public static void main(String[] args) {
        String name;
        Scanner scan = new Scanner(System.in);
        System.out.println("Введите свое имя и нажмите Enter:");
        name=scan.next(); //Читает строку до пробела
        System.out.println("Привет, "+name);
        int age;
        System.out.println("Введите свой возраст: ");
        age = scan.nextInt(); //Читает строку до пробела и преобразует в int
        System.out.println("Ваш возраст - " + age);
    }
}
Также в классе Scanner есть ряд методов для проверки потока ввода. Например, метод hasNextInt()
позволяет проверить, что следующий элемент потока ввода может быть преобразован в целое число.
Таким образом, можно избежать ошибок при выполнении программы.

В предыдущем примере ввод возраста можно переписать с использование метода hasNextInt():

int age;
System.out.println("Введите свой возраст: ");
if(scan.hasNextInt()) {//проверка того, что далее в потоке целое число
       age = scan.nextInt(); //Читает строку до пробела и преобразует в int
       System.out.println("Ваш возраст - " + age);
}else{
       System.out.println("Неверные данные о возрасте!");
}
Отдельно скажу по поводу закрытия потока ввода. Рекомендуется всегда закрывать потоки для того,
 чтобы освобождать ресурсы компьютера. Т.е. после работы со Scanner нужно написать scan.close().
 Но нужно учесть, что метод close() закрывает не сам Scanner, а поток, с которым он связан.
 В наших примерах это стандартный поток System.in, связанный с клавиатурой.
 Если Вы его закроете, то в дальнейшем Вы не сможете создать другой Scanner,
 чтобы продолжать считывать данные с клавиатуры:

public class Example91 {
    public static void main(String[] args) {
        Scanner scan=new Scanner(System.in);
        System.out.println("Введите Ваше имя: ");
        String name;
        name=scan.nextLine(); //здесь вводит нормально
        scan.close(); //закрыли стандартный поток ввода
        Scanner scan2=new Scanner(System.in); //создаем новый сканнер
        System.out.println("Сколько Вам лет?");
        int age = scan.nextInt(); //здесь возникает ошибка во время выполнения
        scan2.close();
    }
}
 Вывод: закрывать Сканнер в наших примерах можно только тогда, когда Вы не планируете больше ввод с клавиатуры!
 */
public class ВыводНаКонсоль {
    public static void main(String[] args) {

    }
}
