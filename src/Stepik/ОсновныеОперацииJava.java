package Stepik;

public class ОсновныеОперацииJava {


        /*
        В языке Java определены арифметические операции (+, -, *, /, %), которые можно применять к числовым данным базовых типов, а также к объектам типа char. Если операция  / применяется к целым числам, то выполняется целочисленное деление (дробная часть отбрасывается). Операция % (взятие остатка от деления) применима не только к целым числам, но и к числам с плавающей точкой.  Например, в результате вычисления выражения 10.0%3.0 будет получено 1.0.

Инкремент (++) означает увеличение значения переменной на единицу. Т.е. x++; эквивалентен  x = x+1; Аналогично декремент (--) означает уменьшение переменной на единицу (x--; эквивалентен x=x-1;) Эти операции могут иметь одну из форм:

префиксную (++x; //аргумент изменяется до его использования)
постфиксную (x++; //аргумент изменяется после использования)
Операции сравнения (==, !=, >, <, >=, <=) дают в результате логическое значение типа boolean. Их можно применять ко всем числовым типам и типу char. К операндам типа boolean можно применять только проверку на равенство или неравенство, поскольку истинные и ложные значения не имеют отношения порядка. Например, выражение true>false не имеет смысла в Java.

Операнды и результат логических операций, имеют тип boolean:

& (И - результат true, если оба операнда true)
| (ИЛИ - результат true, если хотя бы один операнд true)
^ (Исключающее ИЛИ - результат true, если только один из операндов true)
&& (Укороченное И)
|| (Укороченное ИЛИ)
! (НЕ - true меняется на false, и наоборот)
Результаты применения операций &, |, ^, ! показаны в таблице:

p        q      p&q      p|q      p^q      !p

false   false   false   false   false     true

true    false   false   true    true    false

false   true    false   true    true    true

true    true    true    true    false   false

Укороченные варианты логических операций И и ИЛИ позволяют выполнять
быструю оценку значений логических выражений. Если по значению первого операнда
очевиден результат, то второй операнд не вычисляется. Это экономит время и повышает эффективность кода.
 В примере ниже использование укороченной логической операции позволяет избежать деления на 0.
*/

    public static void main(String[] args) {
//        int number = 50;
//        int delitel = 0;
//        //второй операнд не вычисляется и ошибки не возникает
//        if (delitel != 0 && (number % delitel) == 0)
//            System.out.println(delitel + " является делителем " + number);
////        Без использования укороченного оператора
////          возникнет ошибка "деление на ноль"
////        if (delitel != 0 & (number % delitel) == 0)
////            System.out.println(delitel + " является делителем " + number);
//        System.out.println("Завершение работы программы");
//        int k=3/2;
//        System.out.println(k++);
//        System.out.println();
//        double x=9/2;
//        double y=17/5;
//        System.out.println(x%y);
        System.out.println();
        int a=5;
        int b=9;
        int c=(a>b)?a:b;
        c+=2;
        System.out.println(c);
    }
}
/*
Операции &, |, ^ могут также применяться для целочисленных операндов.
В этом случае выполняются поразрядные (битовые) операции аналогично языку С++.
Кроме того, в Java можно использовать и другие битовые операции, но в рамках этого курса мы их рассматривать не будем.

Тернарная операция «?:» имеет формат: выражение_boolean ? выражение1 : выражение2

Если выражение_boolean имеет значение  true, вычисляется значение выражение1,
 и оно становится результатом операции, иначе результатом является значение выражение2.

Например, в приведенном ниже примере клиент получает бонус в размере десятипроцентной
скидки, если число купленных предметов больше трех (в противном случае скидка не предоставляется):

int bonus;
bonus = purchaseItem > 3 ? 10 : 0 ;
Операция присваивания обозначается одиночным знаком равенства (=): переменная=выражение;

где переменная и выражение должны иметь совместимые типы.

Можно создавать цепочки операций присваивания. Порядок вычисления таких выражений – справа налево: x=y=z=100;

Аналогично языку C++ можно использовать составные операции  присваивания: +=,  -=, *=, /=, %=.

В Java отсутствует перегрузка операций, которую может назначить программист. Однако несколько операций перегружены по умолчанию:

 +   используется для сложения чисел и конкатенации (соединения) строк;
&    используется для побитовой операции с числами и для логического И
 |     используется для побитовой операции с числами и для логического ИЛИ
 ^    используется для побитовой операции с числами и для логического исключающего ИЛИ
==  сравнивает любые типы
!=   сравнивает любые типы
Приоритеты операций

При вычислении сложных выражений в Java учитывается приоритет операций. Операции с более высоким приоритетом выполняются в первую очередь. Скобки имеют наивысший приоритет. Приоритеты операций показаны в таблице:


         */

